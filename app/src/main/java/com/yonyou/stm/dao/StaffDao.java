package com.yonyou.stm.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yonyou.stm.domain.Staff;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STAFF".
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "STAFF";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FrontImg = new Property(1, String.class, "frontImg", false, "FRONT_IMG");
        public final static Property BackImg = new Property(2, String.class, "backImg", false, "BACK_IMG");
        public final static Property Addr = new Property(3, String.class, "addr", false, "ADDR");
        public final static Property IdNumber = new Property(4, String.class, "idNumber", false, "ID_NUMBER");
        public final static Property Birthday = new Property(5, Long.class, "birthday", false, "BIRTHDAY");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property Ethnic = new Property(8, String.class, "ethnic", false, "ETHNIC");
        public final static Property WorkYears = new Property(9, Double.class, "workYears", false, "WORK_YEARS");
        public final static Property Dispatch = new Property(10, String.class, "dispatch", false, "DISPATCH");
        public final static Property Salary = new Property(11, Double.class, "salary", false, "SALARY");
        public final static Property Credit = new Property(12, Float.class, "credit", false, "CREDIT");
        public final static Property IssueAuth = new Property(13, String.class, "issueAuth", false, "ISSUE_AUTH");
        public final static Property SignDate = new Property(14, Long.class, "signDate", false, "SIGN_DATE");
        public final static Property ExpiryDate = new Property(15, Long.class, "expiryDate", false, "EXPIRY_DATE");
        public final static Property Phone = new Property(16, String.class, "phone", false, "PHONE");
        public final static Property ContactType = new Property(17, String.class, "contactType", false, "CONTACT_TYPE");
        public final static Property ContactTel = new Property(18, String.class, "contactTel", false, "CONTACT_TEL");
        public final static Property EntryDate = new Property(19, Long.class, "entryDate", false, "ENTRY_DATE");
    };


    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STAFF\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FRONT_IMG\" TEXT," + // 1: frontImg
                "\"BACK_IMG\" TEXT," + // 2: backImg
                "\"ADDR\" TEXT," + // 3: addr
                "\"ID_NUMBER\" TEXT," + // 4: idNumber
                "\"BIRTHDAY\" INTEGER," + // 5: birthday
                "\"NAME\" TEXT," + // 6: name
                "\"GENDER\" TEXT," + // 7: gender
                "\"ETHNIC\" TEXT," + // 8: ethnic
                "\"WORK_YEARS\" REAL," + // 9: workYears
                "\"DISPATCH\" TEXT," + // 10: dispatch
                "\"SALARY\" REAL," + // 11: salary
                "\"CREDIT\" REAL," + // 12: credit
                "\"ISSUE_AUTH\" TEXT," + // 13: issueAuth
                "\"SIGN_DATE\" INTEGER," + // 14: signDate
                "\"EXPIRY_DATE\" INTEGER," + // 15: expiryDate
                "\"PHONE\" TEXT," + // 16: phone
                "\"CONTACT_TYPE\" TEXT," + // 17: contactType
                "\"CONTACT_TEL\" TEXT," + // 18: contactTel
                "\"ENTRY_DATE\" INTEGER);"); // 19: entryDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STAFF\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String frontImg = entity.getFrontImg();
        if (frontImg != null) {
            stmt.bindString(2, frontImg);
        }
 
        String backImg = entity.getBackImg();
        if (backImg != null) {
            stmt.bindString(3, backImg);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(5, idNumber);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String ethnic = entity.getEthnic();
        if (ethnic != null) {
            stmt.bindString(9, ethnic);
        }
 
        Double workYears = entity.getWorkYears();
        if (workYears != null) {
            stmt.bindDouble(10, workYears);
        }
 
        String dispatch = entity.getDispatch();
        if (dispatch != null) {
            stmt.bindString(11, dispatch);
        }
 
        Double salary = entity.getSalary();
        if (salary != null) {
            stmt.bindDouble(12, salary);
        }
 
        Float credit = entity.getCredit();
        if (credit != null) {
            stmt.bindDouble(13, credit);
        }
 
        String issueAuth = entity.getIssueAuth();
        if (issueAuth != null) {
            stmt.bindString(14, issueAuth);
        }
 
        Long signDate = entity.getSignDate();
        if (signDate != null) {
            stmt.bindLong(15, signDate);
        }
 
        Long expiryDate = entity.getExpiryDate();
        if (expiryDate != null) {
            stmt.bindLong(16, expiryDate);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(17, phone);
        }
 
        String contactType = entity.getContactType();
        if (contactType != null) {
            stmt.bindString(18, contactType);
        }
 
        String contactTel = entity.getContactTel();
        if (contactTel != null) {
            stmt.bindString(19, contactTel);
        }
 
        Long entryDate = entity.getEntryDate();
        if (entryDate != null) {
            stmt.bindLong(20, entryDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String frontImg = entity.getFrontImg();
        if (frontImg != null) {
            stmt.bindString(2, frontImg);
        }
 
        String backImg = entity.getBackImg();
        if (backImg != null) {
            stmt.bindString(3, backImg);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(5, idNumber);
        }
 
        Long birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindLong(6, birthday);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(8, gender);
        }
 
        String ethnic = entity.getEthnic();
        if (ethnic != null) {
            stmt.bindString(9, ethnic);
        }
 
        Double workYears = entity.getWorkYears();
        if (workYears != null) {
            stmt.bindDouble(10, workYears);
        }
 
        String dispatch = entity.getDispatch();
        if (dispatch != null) {
            stmt.bindString(11, dispatch);
        }
 
        Double salary = entity.getSalary();
        if (salary != null) {
            stmt.bindDouble(12, salary);
        }
 
        Float credit = entity.getCredit();
        if (credit != null) {
            stmt.bindDouble(13, credit);
        }
 
        String issueAuth = entity.getIssueAuth();
        if (issueAuth != null) {
            stmt.bindString(14, issueAuth);
        }
 
        Long signDate = entity.getSignDate();
        if (signDate != null) {
            stmt.bindLong(15, signDate);
        }
 
        Long expiryDate = entity.getExpiryDate();
        if (expiryDate != null) {
            stmt.bindLong(16, expiryDate);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(17, phone);
        }
 
        String contactType = entity.getContactType();
        if (contactType != null) {
            stmt.bindString(18, contactType);
        }
 
        String contactTel = entity.getContactTel();
        if (contactTel != null) {
            stmt.bindString(19, contactTel);
        }
 
        Long entryDate = entity.getEntryDate();
        if (entryDate != null) {
            stmt.bindLong(20, entryDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // frontImg
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // backImg
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idNumber
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // birthday
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ethnic
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // workYears
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dispatch
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // salary
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // credit
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // issueAuth
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // signDate
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // expiryDate
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // phone
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // contactType
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // contactTel
            cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19) // entryDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrontImg(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBackImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirthday(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEthnic(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWorkYears(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setDispatch(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSalary(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setCredit(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setIssueAuth(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSignDate(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setExpiryDate(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setPhone(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setContactType(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setContactTel(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setEntryDate(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
